<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MyBatis | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/mybatis/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2013-12-10T14:41:28+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Plugin For MyBatis Generator]]></title>
    <link href="http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator/"/>
    <updated>2013-12-09T14:31:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator</id>
    <content type="html"><![CDATA[<p>因为项目原因，最近又重新看了一下MyBatis，发现MyBatis只有Ant和Maven的Generator，没有Gradle的插件。而现在Gradle已经越来越流行，没有Gradle插件怎么行。<br/>
编写Gradle插件，可以从头自己实现，也可以调用现有的Ant Task。MyBatis已经有Ant的Generator了，所以我决定不重造轮子，调用Ant的Task就行了。</p>

<h2>定义插件Task的类型</h2>

<p>编写插件就是为了重用一些Task，比如Gradle的Java插件，就提供了编译、测试以及打包等Task，这样在构建脚本里使用：<br/>
<code>
apply: 'java'
</code><br/>
就可以使用这些Task。所以我们自定义插件，就难免要为插件定义Task。Gradle中的Task也是有类型的，比如<a href="http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Copy.html">Copy</a>的Task。自定义Task也可以继承已经有的Task，但是我们这里要使用的Task是Ant提供的，所以我们需要继承ConventionTask。<br/>
{% codeblock Task的定义 lang:groovy %}
class MyBatisGeneratorTask extends ConventionTask {</p>

<pre><code>//Define some properties
@TaskAction
void executeCargoAction() {
//Implement the task action
}
</code></pre>

<p>}
{% endcodeblock %}
申明了Task之后，就需要实现Task的Action了，就是该Task都做哪些事情。我们这里要调用MyBatis的Ant任务，所以需要使用IsolatedAntBuilder。代码如下：<br/>
{% codeblock Task的Action实现 lang:groovy %}
services.get(IsolatedAntBuilder).withClasspath(getMyBatisGeneratorClasspath()).execute {</p>

<pre><code>   ant.taskdef(name: 'mbgenerator', 
                     classname: 'org.mybatis.generator.ant.GeneratorAntTask')

   ant.properties['generated.source.dir'] = getTargetDir()
   ant.mbgenerator(overwrite: getOverwrite(), 
                        configfile: getConfigFile(), 
                        verbose: getVerbose()) {}
</code></pre>

<p>}
{% endcodeblock %}
跟Ant里一样，要使用自定义的Ant任务，就必须先通过Ant的Taskdef定义一个Task，之后才能在Ant脚本里使用。同样在Gradle里也通过<strong>ant.taskdef</strong>来定义新的Ant任务。要定义Task，我们就需要制定从哪个classpath下去加载指定的类名<em>org.mybatis.generator.ant.GeneratorAntTask</em>。这里我们通过getMyBatisGeneratorClasspath()获得，这就需要我们在使用该Gradle Task的时候讲classpath传到Task里去，所以我们就需要定义Task的属性了。同时，大家还应该注意到这里不止一个getMyBatisGeneratorClasspath()方法，还有其他的Get方法，这些Get方法都是从Task的属性取值。我们的Task属性定义如下：<br/>
{% codeblock Task的属性 lang:groovy %}
def overwrite
def configFile
def verbose
def targetDir
FileCollection myBatisGeneratorClasspath
{% endcodeblock %}</p>

<h2>编写Plugin</h2>

<p>有了Task类型之后，我们就可以编写Plugin了。自定义Plugin需要实现Plugin接口： <br/>
{% codeblock Plugin lang:groovy %}</p>

<p>class MyBatisGeneratorPlugin implements Plugin<ProjectInternal> {</p>

<pre><code>@Override
void apply(ProjectInternal project) {
    project.logger.info "Configuring MyBatis Generator for project: $project.name"
    MyBatisGeneratorTask task = project.tasks.create("mbGenerator", MyBatisGeneratorTask);
    project.configurations.create('mybatis').with {
        description = 'The MyBatis Generator to be used for this project.'
    }
    project.extensions.create("mybatis", MyBatisGeneratorPluginExtension)

    task.conventionMapping.with {
        myBatisGeneratorClasspath = {
            def config = project.configurations['mybatis']
            if (config.dependencies.empty) {
                project.dependencies {
                    mybatis('org.mybatis.generator:mybatis-generator-core:1.3.2')
                }
            }
            config
        }
        overwrite = { project.mybatis.overwrite }
        configFile = { project.mybatis.configFile }
        verbose = { project.mybatis.verbose }
        targetDir = { project.mybatis.targetDir }
    }

}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>在这里我们通过<em>MyBatisGeneratorTask task = project.tasks.create("mbGenerator", MyBatisGeneratorTask);</em>创建一个Task并给该Task指定相应的属性。</p>

<h2>插件的配置</h2>

<p>要编写插件，就难免需要在Gradle里配置该插件。在Gradle的插件里，通常都提供默认配置值，但是有时在Gradle构建脚本里也需要让用户自定义。在Gradle里使用<em>extension objects</em>方法，通过Project的<a href="http://www.gradle.org/docs/current/javadoc/org/gradle/api/plugins/ExtensionContainer.html">ExtensionContainer</a>对象，把构建脚本里的配置信息传到插件里。Extension很简单，就是简单的Groovy对象：<br/>
{% codeblock Extension的定义 lang:groovy %}
@ToString(includeNames = true)
class MyBatisGeneratorPluginExtension {</p>

<pre><code>def overwrite = true
def configFile = "generatorConfig.xml"
def verbose = false
def targetDir = "."
</code></pre>

<p>}
{% endcodeblock %} <br/>
接下来就是在插件里使用这个Extension：<br/>
{% codeblock Extension的使用 lang:groovy %}
project.extensions.create("mybatis", MyBatisGeneratorPluginExtension)
{% endcodeblock %}
这里就会把构建脚本里的mybatis的配置，合并到我们提供的Extension里去，比如在构建脚本里提供如下的配置：<br/>
{% codeblock 配置插件 lang:groovy %}
mybatis{</p>

<pre><code>configFile = '../generatorConfig.xml'
</code></pre>

<p>}
{% endcodeblock %}<br/>
就会覆盖默认的configFile配置，默认会从当前目录里去找generatorConfig.xml的文件，但是经过我们配置之后，就会从上级目录去找该文件。</p>

<h2>Summary</h2>

<p>至此，Gradle的MyBatis插件编写完毕，下面一个问题就是如何在项目中使用。该插件已经上传到Github:<a href="https://github.com/reverocean/MyBatisGenerator">https://github.com/reverocean/MyBatisGenerator</a>。</p>
]]></content>
  </entry>
  
</feed>
