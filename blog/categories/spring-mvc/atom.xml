<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Spring MVC | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/spring-mvc/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2013-12-10T14:41:28+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Validating Model Attributes in Spring @MVC]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/09/validating-model-attributes-in-spring-at-mvc/"/>
    <updated>2012-09-09T14:18:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/09/validating-model-attributes-in-spring-at-mvc</id>
    <content type="html"><![CDATA[<h2>Spring的Validator接口</h2>

<p>Spring的Validation主要接口是：<em>org.springframework.validation.Validator</em>
{% codeblock Validator接口 lang:java %}
package org.springframework.validation;</p>

<p>public interface Validator {    boolean supports(Class&lt;?> clazz);    void validate(Object target, Errors errors);}
{% endcodeblock %}<br/>
* supports方法： 用来判断该validator是否可以验证对象。如果supports返回<strong>true</strong>，框架会调用validate方法去验证。<br/>
* validate方法： 实现验证
在Spring @MVC里有两种方式触发验证：</p>

<pre><code>1.  把Validator注入到Controller，我们自己手工调validate方法。  
2.  在方法上添加*javax.validation.Valid*或者*org.springframework.validation.annotation.Validated*annotation。Spring的annotation要比javax的强大些，可以指定hints和validation groups（如果和JSR-303validator联合使用）
</code></pre>

<p><strong>需要注意的是，validation结果要是有错误的话，validator会返回message code，需要配置MessageSource来让错误消息显示的更有意义些。</strong></p>

<hr />

<h2>实现一个Validator</h2>

<p><strong>需求</strong>
<code>
实现一个验证Account的Validator
username, password和email必填
email是正确的email地址
地址，城市和国家是必填的
</code>
{% codeblock AccountValidator lang:java%}</p>

<p>package com.apress.prospringmvc.bookstore.validation;</p>

<p>import java.util.regex.Pattern;  import org.springframework.validation.Errors;  import org.springframework.validation.ValidationUtils;  import org.springframework.validation.Validator;  import com.apress.prospringmvc.bookstore.domain.Account;public class AccountValidator implements Validator {    private static final String EMAIL_PATTERN = "<sup>[<em>A-Za-z0-9-]+(\.[</em>A-Za-z0-9-]+)*@"</sup>                                                +"[A-Za-z0-9]+(\.[A-Za-z0-9]+)*(\.[A-Za-z]{2,})$";    @Override    public boolean supports(Class&lt;?> clazz) {        return (Account.class).isAssignableFrom(clazz);    }    @Override    public void validate(Object target, Errors errors) {        ValidationUtils.rejectIfEmpty(errors, "username",                                  "required", new Object[] {"Username"});        ValidationUtils.rejectIfEmpty(errors, "password",</p>

<pre><code>          "required", new Object[] {"Password"});        ValidationUtils.rejectIfEmpty(errors, "emailAddress",                                  "required", new Object[] {"Email Address"});        ValidationUtils.rejectIfEmpty(errors, "address.street",                                  "required", new Object[] {"Street"});        ValidationUtils.rejectIfEmpty(errors, "address.city",                                  "required", new Object[] {"City"});        ValidationUtils.rejectIfEmpty(errors, "address.country",                                  "required", new Object[] {"Country"});        if (!errors.hasFieldErrors("emailAddress")) {            Account account = (Account) target;            String email = account.getEmailAddress();            if (!emai.matches(EMAIL_PATTERN)) {                errors.rejectValue("emailAddress", "invalid");            }     }   }}
</code></pre>

<p>{% endcodeblock %}
* 第14行的isAssignableFrom方法用于判断类Class1和另一个类Class2是否相同或是另一个类的超类或接口<br/>
* <em>ValidationUtils.rejectIfEmpty</em>方法用来判断对象的属性是否为空，还有<em>ValidationUtils.rejectIfEmptyOrWhiteSpace</em>方法。但是判断属性是否为空还可以在<em>org.springframework.web.bind.WebDataBinder</em>里加以验证<br/>
* <em>errors.hasFieldErrors("emailAddress")</em> 方法用来判断emailAddress是否有错误<br/>
* <em>errors.rejectValue</em>用于手动往errors里添加一个错误<br/>
* 这里的<em>required</em>都是Error Message的Key，需要Spring的框架处理<br/>
* <em>address.street</em>是嵌套属性</p>

<hr />

<h2>配置并使用自定义Validator</h2>

<p>{% codeblock AccountValidator lang:java%}
package com.apress.prospringmvc.bookstore.web.controller;import com.apress.prospringmvc.bookstore.domain.AccountValidator;import javax.validation.Valid;// Other imports omitted@Controller@RequestMapping("/customer/register")public class RegistrationController {    @InitBinder    public void initBinder(WebDataBinder binder) {        binder.setDisallowedFields("id");        binder.setValidator(new AccountValidator());}@RequestMapping(method = { RequestMethod.POST, RequestMethod.PUT })public String handleRegistration(@Valid @ModelAttribute Account account, BindingResult result) {        if (result.hasErrors()) {            return "customer/register";        }        this.accountService.save(account);        return "redirect:/customer/account/" + account.getId();    }    // Other methods omitted}
{% endcodeblock %}</p>

<ul>
<li><em>binder.setValidator(new AccountValidator())</em>在Controller中将我们自定义的Validator注册一下</li>
<li><em>@Valid @ModelAttribute Account account</em>绑定到Account上，这样当页面提交之后就会触发验证</li>
<li><em>BindingResult result</em>在binding和validation中的错误信息都会放到BindingResult里去</li>
<li>使用<em>result.hasErrors()</em>判断是否有错误（包括binding和validation）</li>
</ul>


<hr />

<h2>使用JSR-303 Validation</h2>

<p>JSR-303提供了一种方便的方式来进行validation，不需要我们自己去实现接口，也不需要在init-binder方法中注册，只需要在要验证的类上加上响应的annotation就可以了。
{% codeblock AccountValidator lang:java%}
package com.apress.prospringmvc.bookstore.domain;
import java.util.Date;import java.util.List;import javax.validation.Valid;import org.hibernate.validator.constraints.Email;import org.hibernate.validator.constraints.NotEmpty;public class Account {    private Long id;    private String firstName;    private String lastName;    private Date dateOfBirth;    @Embedded    @Valid    private Address address = new Address();    @NotEmpty    @Email    private String emailAddress;    @NotEmpty    private String username;    @NotEmpty    private String password;    // getters and setters omitted}
{% endcodeblock %}</p>

<ul>
<li><em>@Embedded</em>表示嵌套对象</li>
<li><em>@NotEmpty</em>验证不能为空</li>
<li><em>@Email</em>验证Email地址的合法性<br/>
<strong>这样看起来JSR-303简单很多</strong></li>
</ul>


<hr />

<blockquote><p>本文是基于Pro Spring MVC - With Web Flow的笔记，非原创</p></blockquote>
]]></content>
  </entry>
  
</feed>
