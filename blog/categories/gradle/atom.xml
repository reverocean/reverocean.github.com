<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2012-09-27T13:44:53+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle for Java]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/27/gradle-for-java/"/>
    <updated>2012-09-27T10:15:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/27/gradle-for-java</id>
    <content type="html"><![CDATA[<p>Gradle针对Java开发提供了‘java’插件，非常方便。如果安装约定的目录结构组织项目，几乎不用修改build.gradle。当然也很方便修改build.gradle去适应你的项目结构。</p>

<h1>A basic Java project</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>使用Java plugin </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'java'</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>gradle的Java插件约定的项目结构跟Maven的项目结构一样</li>
<li>所有的output文件放在build文件夹下</li>
</ul>


<h1>Tasks</h1>

<ul>
<li>build：编译，测试并创建一个包含main下面的类和资源文件的JAR</li>
<li>clean：删除build文件夹，做清理</li>
<li>assemble：编译并打一个JAR包，不测试代码。加了War插件之后会打一个war包</li>
<li>check：编译，测试。也可以添加其他的插件（Code-quality）来检查你的代码格式</li>
</ul>


<h1>管理依赖</h1>

<p>依赖管理分为两个部分，第一是本项目依赖外部的其他jar，第二是本项目会产生一个jar包，别的项目会依赖当前项目的jar包，所以需要把jar包放置到一个公共的位置。</p>

<h2>管理外部依赖</h2>

<ul>
<li>添加Maven的Repository
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加respositories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>  mavenCentral()
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加respositories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {
</span><span class='line'>  maven {
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  url "http://repo.mycompany.com/maven2"
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加lvy respositories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>ivy {
</span><span class='line'>    url "http://repo.mycompany.com/repo"
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加lvy local respositories </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>repositories {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>ivy {
</span><span class='line'>    url "../local-repo"
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<pre><code>*  Gradle支持Maven和lvy的Respository
*  Gradle可以通过local file system或者HTTP访问Respository
*  Gradle默认不配置respository
</code></pre>

<ul>
<li><p>添加dependencies
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加dependencies </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>  compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
</span><span class='line'>  testCompile group: 'junit', name: 'junit', version: '4.+'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>添加dependencies </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dependencies {
</span><span class='line'>  compile 'org.hibernate:hibernate-core:3.6.7.Final'
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li> 跟Maven一样，依赖分为几个声明周期：

<ul>
<li> compile</li>
<li> runtime</li>
<li> testCompile</li>
<li> testRuntime</li>
</ul>
</li>
<li> 同样跟Maven一样，需要指定依赖包的group，name以及version。也可以通过简单的方法“group:name:version”来指定</li>
</ul>
</li>
</ul>


<h2>Publishing artifacts</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>设置publish到lvy </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uploadArchives {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>repositories {
</span><span class='line'>    ivy {
</span><span class='line'>        credentials {
</span><span class='line'>            username "username"
</span><span class='line'>            password "pw"
</span><span class='line'>        }
</span><span class='line'>        url "http://repo.mycompany.com"
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>设置publish到Maven </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apply plugin: 'maven'&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;p>uploadArchives {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>repositories {
</span><span class='line'>    mavenDeployer {
</span><span class='line'>        repository(url: "file://localhost/tmp/myRepo/")
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>设置publish到文件夹 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>uploadArchives {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>repositories {
</span><span class='line'>   flatDir {
</span><span class='line'>       dirs 'repos'
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>}</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Task]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/26/gradle-task/"/>
    <updated>2012-09-26T17:18:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/26/gradle-task</id>
    <content type="html"><![CDATA[<p>Gradle里的task用来描述构建中不可分割的原子任务，例如编译，打包JAR，生存javadoc等，都是task。</p>

<h1>定义Task</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>定义Task </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task hello {
</span><span class='line'>   doLast {
</span><span class='line'>        println "Hello World!"
</span><span class='line'>   }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>简单定义Task </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task upper &lt;&lt; {
</span><span class='line'>    String someString = 'mY_nAmE'
</span><span class='line'>    println "Original: " + someString 
</span><span class='line'>    println "Upper case: " + someString.toUpperCase()
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div>
注意：</p>

<ul>
<li>这里直接使用“&lt;&lt;”来定义Task，“&lt;&lt;”是doLast的别名</li>
<li>定义Task的时候就是写代码，这里先定义了一个变量，然后调用toUpperCase方法</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>另外一个Task </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task count &lt;&lt; {
</span><span class='line'>    4.times { print "$it " }
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h1>运行Task</h1>

<p><code>
gradle -q hello
Hello World!
</code>
其中：</p>

<ul>
<li>-q是gradle的命令行参数，用于阻止gradle的log输出，这样就只输出gradle脚本里输出的内容。</li>
<li>Hello World！是我们定义的task的输出。</li>
</ul>


<h1>Task依赖</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task依赖 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task hello &lt;&lt; {
</span><span class='line'>    println 'Hello world!'
</span><span class='line'>}
</span><span class='line'>task intro(dependsOn: hello) &lt;&lt; {
</span><span class='line'>    println "I'm Gradle"
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>使用dependsOn来定义当前task依赖的task</li>
<li>依赖的Task可以在当前的Task之后定义</li>
</ul>


<h1>动态Task</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task依赖 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>4.times { counter -&gt;
</span><span class='line'>    task "task$counter" &lt;&lt; {
</span><span class='line'>        println "I'm task number $counter"
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>task0.dependsOn task2, task3
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>使用counter作为变量，在定义task的时候使用“<strong>task$counter</strong>”会动态定义出task0，task1，task2，task3</li>
<li><strong>task0.dependsOn task2, task3</strong>通过调用task0的dependsOn的方法，也可以定义Task的依赖</li>
</ul>


<h1>Task的API</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task hello &lt;&lt; {
</span><span class='line'>    println 'Hello Earth'
</span><span class='line'>}
</span><span class='line'>hello.doFirst {
</span><span class='line'>    println 'Hello Venus'
</span><span class='line'>}
</span><span class='line'>hello.doLast {
</span><span class='line'>    println 'Hello Mars'
</span><span class='line'>}
</span><span class='line'>hello &lt;&lt; {
</span><span class='line'>    println 'Hello Jupiter'
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>doFirst和doLast可以被执行多次</li>
<li>定义完task之后，就可以调用doLast，doFirst和&lt;&lt;</li>
</ul>


<h1>Task的属性</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task myTask {
</span><span class='line'>    ext.myProperty = "myValue"
</span><span class='line'>}
</span><span class='line'>task printTaskProperties &lt;&lt; {
</span><span class='line'>    println myTask.myProperty
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在定义Task的时候，使用<strong>ext.myProperty</strong>为Task添加属性</li>
<li>在别的Task里，直接使用<strong>myTask.myProperty</strong>来访问Task的属性</li>
</ul>


<h1>定义函数</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>task checksum &lt;&lt; {
</span><span class='line'>    fileList('../antLoadfileResources').each {File file -&gt;
</span><span class='line'>        ant.checksum(file: file, property: "cs_$file.name")
</span><span class='line'>        println "$file.name Checksum: ${ant.properties["cs_$file.name"]}"
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>task loadfile &lt;&lt; {
</span><span class='line'>    fileList('../antLoadfileResources').each {File file -&gt;
</span><span class='line'>        ant.loadfile(srcFile: file, property: file.name)
</span><span class='line'>        println "I'm fond of $file.name"
</span><span class='line'>    }
</span><span class='line'>}
</span><span class='line'>File[] fileList(String dir) {
</span><span class='line'>    file(dir).listFiles({file -&gt; file.isFile() } as         FileFilter).sort()
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>在后面定义了fileList函数</li>
<li>在定义Task的时候，调用fileList函数</li>
</ul>


<h1>默认Task</h1>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task API </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>defaultTasks 'clean', 'run'
</span><span class='line'>task clean &lt;&lt; {
</span><span class='line'>    println 'Default Cleaning!'
</span><span class='line'>}
</span><span class='line'>task run &lt;&lt; {
</span><span class='line'>    println 'Default Running!'
</span><span class='line'>}
</span><span class='line'>task other &lt;&lt; {
</span><span class='line'>    println "I'm not a default task!"
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>使用<strong>defaultTasks 'clean', 'run'</strong>定义哪些task是默认的</li>
<li>可以定义多个默认的Task</li>
</ul>

]]></content>
  </entry>
  
</feed>
