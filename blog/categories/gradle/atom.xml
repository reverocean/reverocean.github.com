<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2013-12-10T14:41:28+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Gradle Plugin For MyBatis Generator]]></title>
    <link href="http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator/"/>
    <updated>2013-12-09T14:31:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator</id>
    <content type="html"><![CDATA[<p>因为项目原因，最近又重新看了一下MyBatis，发现MyBatis只有Ant和Maven的Generator，没有Gradle的插件。而现在Gradle已经越来越流行，没有Gradle插件怎么行。<br/>
编写Gradle插件，可以从头自己实现，也可以调用现有的Ant Task。MyBatis已经有Ant的Generator了，所以我决定不重造轮子，调用Ant的Task就行了。</p>

<h2>定义插件Task的类型</h2>

<p>编写插件就是为了重用一些Task，比如Gradle的Java插件，就提供了编译、测试以及打包等Task，这样在构建脚本里使用：<br/>
<code>
apply: 'java'
</code><br/>
就可以使用这些Task。所以我们自定义插件，就难免要为插件定义Task。Gradle中的Task也是有类型的，比如<a href="http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Copy.html">Copy</a>的Task。自定义Task也可以继承已经有的Task，但是我们这里要使用的Task是Ant提供的，所以我们需要继承ConventionTask。<br/>
{% codeblock Task的定义 lang:groovy %}
class MyBatisGeneratorTask extends ConventionTask {</p>

<pre><code>//Define some properties
@TaskAction
void executeCargoAction() {
//Implement the task action
}
</code></pre>

<p>}
{% endcodeblock %}
申明了Task之后，就需要实现Task的Action了，就是该Task都做哪些事情。我们这里要调用MyBatis的Ant任务，所以需要使用IsolatedAntBuilder。代码如下：<br/>
{% codeblock Task的Action实现 lang:groovy %}
services.get(IsolatedAntBuilder).withClasspath(getMyBatisGeneratorClasspath()).execute {</p>

<pre><code>   ant.taskdef(name: 'mbgenerator', 
                     classname: 'org.mybatis.generator.ant.GeneratorAntTask')

   ant.properties['generated.source.dir'] = getTargetDir()
   ant.mbgenerator(overwrite: getOverwrite(), 
                        configfile: getConfigFile(), 
                        verbose: getVerbose()) {}
</code></pre>

<p>}
{% endcodeblock %}
跟Ant里一样，要使用自定义的Ant任务，就必须先通过Ant的Taskdef定义一个Task，之后才能在Ant脚本里使用。同样在Gradle里也通过<strong>ant.taskdef</strong>来定义新的Ant任务。要定义Task，我们就需要制定从哪个classpath下去加载指定的类名<em>org.mybatis.generator.ant.GeneratorAntTask</em>。这里我们通过getMyBatisGeneratorClasspath()获得，这就需要我们在使用该Gradle Task的时候讲classpath传到Task里去，所以我们就需要定义Task的属性了。同时，大家还应该注意到这里不止一个getMyBatisGeneratorClasspath()方法，还有其他的Get方法，这些Get方法都是从Task的属性取值。我们的Task属性定义如下：<br/>
{% codeblock Task的属性 lang:groovy %}
def overwrite
def configFile
def verbose
def targetDir
FileCollection myBatisGeneratorClasspath
{% endcodeblock %}</p>

<h2>编写Plugin</h2>

<p>有了Task类型之后，我们就可以编写Plugin了。自定义Plugin需要实现Plugin接口： <br/>
{% codeblock Plugin lang:groovy %}</p>

<p>class MyBatisGeneratorPlugin implements Plugin<ProjectInternal> {</p>

<pre><code>@Override
void apply(ProjectInternal project) {
    project.logger.info "Configuring MyBatis Generator for project: $project.name"
    MyBatisGeneratorTask task = project.tasks.create("mbGenerator", MyBatisGeneratorTask);
    project.configurations.create('mybatis').with {
        description = 'The MyBatis Generator to be used for this project.'
    }
    project.extensions.create("mybatis", MyBatisGeneratorPluginExtension)

    task.conventionMapping.with {
        myBatisGeneratorClasspath = {
            def config = project.configurations['mybatis']
            if (config.dependencies.empty) {
                project.dependencies {
                    mybatis('org.mybatis.generator:mybatis-generator-core:1.3.2')
                }
            }
            config
        }
        overwrite = { project.mybatis.overwrite }
        configFile = { project.mybatis.configFile }
        verbose = { project.mybatis.verbose }
        targetDir = { project.mybatis.targetDir }
    }

}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>在这里我们通过<em>MyBatisGeneratorTask task = project.tasks.create("mbGenerator", MyBatisGeneratorTask);</em>创建一个Task并给该Task指定相应的属性。</p>

<h2>插件的配置</h2>

<p>要编写插件，就难免需要在Gradle里配置该插件。在Gradle的插件里，通常都提供默认配置值，但是有时在Gradle构建脚本里也需要让用户自定义。在Gradle里使用<em>extension objects</em>方法，通过Project的<a href="http://www.gradle.org/docs/current/javadoc/org/gradle/api/plugins/ExtensionContainer.html">ExtensionContainer</a>对象，把构建脚本里的配置信息传到插件里。Extension很简单，就是简单的Groovy对象：<br/>
{% codeblock Extension的定义 lang:groovy %}
@ToString(includeNames = true)
class MyBatisGeneratorPluginExtension {</p>

<pre><code>def overwrite = true
def configFile = "generatorConfig.xml"
def verbose = false
def targetDir = "."
</code></pre>

<p>}
{% endcodeblock %} <br/>
接下来就是在插件里使用这个Extension：<br/>
{% codeblock Extension的使用 lang:groovy %}
project.extensions.create("mybatis", MyBatisGeneratorPluginExtension)
{% endcodeblock %}
这里就会把构建脚本里的mybatis的配置，合并到我们提供的Extension里去，比如在构建脚本里提供如下的配置：<br/>
{% codeblock 配置插件 lang:groovy %}
mybatis{</p>

<pre><code>configFile = '../generatorConfig.xml'
</code></pre>

<p>}
{% endcodeblock %}<br/>
就会覆盖默认的configFile配置，默认会从当前目录里去找generatorConfig.xml的文件，但是经过我们配置之后，就会从上级目录去找该文件。</p>

<h2>Summary</h2>

<p>至此，Gradle的MyBatis插件编写完毕，下面一个问题就是如何在项目中使用。该插件已经上传到Github:<a href="https://github.com/reverocean/MyBatisGenerator">https://github.com/reverocean/MyBatisGenerator</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart GCIS]]></title>
    <link href="http://reverocean.github.com/blog/2013/03/28/smart-gcis/"/>
    <updated>2013-03-28T20:14:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/03/28/smart-gcis</id>
    <content type="html"><![CDATA[<p>在大数据如此活跃的今天，我们这两天也跟大数据来了一次亲密接触。我们六个人的小组在一天时间里完成了一个简单的产品智能推荐系统，我们称为<a href="https://github.com/reverocean/Stuart">Smart GCIS</a>。</p>

<h1>项目结构</h1>

<p>我们决定提供Micro-Service，所以在项目里面我们分了好如下几个模块：</p>

<ul>
<li>smart-persistence</li>
<li>smart-match</li>
<li>smart-recommendation</li>
<li>smart-web<br/>
其中smart-persistence提供持久层服务，我们使用Hibernate来访问Mysql；smart-match提供match功能，通过Spring-Batch调用Match引擎来匹配相同的用户；smart-recommendation为客户推荐可能要购买的产品；smart-web提供一个界面用于市场人员查看客户以及其推荐产品，同事smart-web还提供RESTd的Micro-Service。</li>
</ul>


<h1>构建脚本</h1>

<p>针对这样的一个多模块项目，我们使用<a href="http://www.gradle.org/">Gradle</a>作为我们项目的构建脚本。</p>

<h2>问题</h2>

<p>在项目的初期，搭建项目的时候，我犯了一个致命的疏忽。就是在配置多模块的项目时需要一个settings.gradle的文件，我少写了一个<strong>s</strong>，导致子模块在Idea里不是Java项目。这个废了我不少时间，最后还是<a href="http://dreamhead.blogbus.com/">dreamhead</a>帮助才发现问题。<br/>
<strong>我要跟s做斗争</strong></p>

<h2>进步</h2>

<p>我们在项目里面使用<a href="http://dropwizard.codahale.com/">DropWizard</a>作为Micro-Service的web开发，而Dropwizard的一个特点就是它通过一个main函数启动并提供web服务。在DropWizard官方文档里是要让打成jar包，然后通过Java -jar来运行。这样是很方便，但是在开发过程中就不方便了，因为要打Jar包之后运行，才能看见结果。<br/>
所以我引入了Gradle的<a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">application</a>插件，在smart-web的build.gradle文件中apply这个插件，并且指定要运行的main之后就可以在命令行里运行：
<code>groovy
gradle :smart-web:run
</code>
来运行DropWizard了。不过这里还有个问题就是在运行DropWizard的时候，需要为main函数提供一个server和configuration.yml的参数，但是在gradle :smart-web:run后面加上这两个参数有会报错。好在Gradle的appliation插件提供了相应的配置：<br/>
```groovy
run {</p>

<pre><code>args 'server', 'src/main/resources/stuart.yaml'
</code></pre>

<p>}
```
这样就解决问题了。
 <!--more--></p>

<h1>DropWizard</h1>

<p>在<a href="http://www.thoughtworks.com/cn/articles/technology-radar-october-2012-0">ThoughtWorks2012年的技术雷达</a>中，提到了一个趋势，就是embedded servlet containers。<a href="http://dropwizard.codahale.com/">DropWizard</a>就是这样一个embedded servlet containers。<br/>
Dropwizard的文档很详细，我就不赘述了，但是在这个项目中，我们使用Dropwizard提供web页面（Freemarker），就必然要访问css和javascript。目前，Dropwizard还不支持提供assets，好在我们碰见的问题都不时问题，已经有人已经提供好了<a href="https://github.com/bazaarvoice/dropwizard-configurable-assets-bundle">扩展</a>，我们只需要include进来就可以了。</p>

<ul>
<li>首先，需要在build.gradle中加入"com.bazaarvoice.dropwizard:dropwizard-configurable-assets-bundle:0.1.9"的依赖</li>
<li>其次按照扩展的说明文档，很容易就能配好</li>
<li>但是有一个坑，就是assets的目录需要映射的，在文档中是dashboard，需要改成自己需要的就可以了</li>
</ul>


<h1>其他</h1>

<p>这次活动一共6个人，一个人准备数据，一个人完成持久层，一个人完成匹配引擎，一个人完成推荐系统，两个人pair做界面，感觉配合的非常好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add cucumber-JVM into project with gradle]]></title>
    <link href="http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle/"/>
    <updated>2013-01-14T17:19:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle</id>
    <content type="html"><![CDATA[<p>众所周知，Cucumber是Ruby的一个用来BDD的测试框架。<a href="https://github.com/cucumber/cucumber-jvm">Cucumber-Java</a>则是Java版的Cucumber，它模拟Ruby里的DSL，使用Annotation创建了一套Java的BDD测试框架。Cucumber-JVM项目中只有通过ant和maven来使用Cucumber-JVM的例子，这里我记录一下Cucumber-JVM如何在Gradle里使用。</p>

<h2>为项目引入Cucumber-JVM</h2>

<p>首先在build.gradle文件中加入对于Cucumber-JVM的依赖：<br/>
```groovy
testCompile(</p>

<pre><code>        'info.cukes:cucumber-java:1.1.1',
        'info.cukes:cucumber-junit:1.1.1',
        'junit:junit:4.10'
</code></pre>

<p>)
```</p>

<h2>添加task运行Cucumber</h2>

<p>添加完stories和steps之后，就可以运行Cucumber-JVM了，看看我们的测试是否通过。虽然在Gradle里文档里说了运行<strong>gradle test</strong>时，会扫描classpath路径下具有@RunWith annotation的类，并作为JUnit的测试去运行。但是，我在使用的时候（gradlew1.3），运行<strong>gradle test</strong>找不到标记了@RunWith的JUnit Runner（这个是gradle的一个bug，已经有人报上去了）。<br/>
在研究了Cucumber-JVM自带的例子里的ant脚本之后，我通过添加一个task来运行Cucumber-JVM的测试：<br/>
```groovy cucumber task
task cucumber() {</p>

<pre><code>dependsOn classes
doLast {
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath configurations.cucumberRuntime
        classpath sourceSets.main.output.classesDir
        classpath sourceSets.test.output.classesDir
        args = ['-f', 'pretty', '--glue', 'cucumber.examples.java.helloworld', 'src/test/resources']

    }
}
</code></pre>

<p>}
```</p>

<ul>
<li>这里实际上就是运行Cucumber-JVM提供的Java类cucumber.api.cli.Main去运行@RunWith的JUnit Runner。</li>
<li>需要给cucumber.api.cli.Main类指定classpath：<em>sourceSets.test.output.classesDir</em>，<em>sourceSets.main.output.classesDir</em>以及<em>configurations.cucumberRuntime</em>。configurations.cucumberRuntime的配置如下：<br/>
```groovy
configurations {
cucumberRuntime {

<pre><code>extendsFrom testCompile
</code></pre>

<p>}
}
```</p></li>
<li>通过args指定steps的包（cucumber.examples.java.helloworld）和stories的目录（src/test/resources）</li>
</ul>


<p> <!--more-->
 ##完整build.gradle</p>

<p>{% codeblock build.gradle lang:groovy %}
apply plugin: 'java'
apply plugin: 'idea'</p>

<p>repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}</p>

<p>configurations {</p>

<pre><code>cucumberRuntime {
    extendsFrom testRuntime
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>testCompile(
        'info.cukes:cucumber-java:1.1.1',
        'info.cukes:cucumber-junit:1.1.1',
        'junit:junit:4.10'
)
</code></pre>

<p>}</p>

<p>task cucumber() {</p>

<pre><code>dependsOn classes
doLast {
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath configurations.cucumberRuntime
        classpath sourceSets.main.output.classesDir
        classpath sourceSets.test.output.classesDir
        args = ['-f', 'pretty', '--glue', 'cucumber.examples.java.helloworld', 'src/test/resources']

    }
}
</code></pre>

<p>}
 {% endcodeblock %}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Building Script]]></title>
    <link href="http://reverocean.github.com/blog/2012/10/12/writing-building-script/"/>
    <updated>2012-10-12T14:43:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/10/12/writing-building-script</id>
    <content type="html"><![CDATA[<p>在Gradle运行的时候，会创建一个Project的实例。同时每个Script文件也会被编译为一个实现了<strong>Script</strong>的类，也就意味着在<strong>Script</strong>接口里声明的属性和方法在你的Script文件里都是有效的。</p>

<h1>定义变量</h1>

<h2>局部变量</h2>

<p>{% codeblock Local variables lang:groovy %}</p>

<pre><code>def dest = "dest"
task copy(type: Copy) {
    from "source"
    into dest
}
</code></pre>

<p>{% endcodeblock %}</p>

<h2>Extra properties</h2>

<p>{% codeblock Extra properties lang:groovy %}
apply plugin: "java"</p>

<p>ext {</p>

<pre><code>springVersion = "3.1.0.RELEASE"
emailNotification = "build@master.org"
</code></pre>

<p>}</p>

<p>sourceSets.all { ext.purpose = null }</p>

<p>sourceSets {</p>

<pre><code>main {
    purpose = "production"
}
test {
    purpose = "test"
}
plugin {
    purpose = "production"
}
</code></pre>

<p>}</p>

<p>task printProperties &lt;&lt; {</p>

<pre><code>println springVersion
println emailNotification
sourceSets.matching { it.purpose == "production" }.each { println it.name }
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>Gradle的每个对象都可以通过ext来定义属性</li>
<li><em>sourceSets.all { ext.purpose = null }</em>为<strong>sourceSets</strong>包含的每个对象设置一个<em>ext.purpose</em>属性(相当于初始化)，不要这句的话，build也能正常运行，但是会有Warning</li>
<li><strong>sourceSets</strong>是Configures the source sets of this project</li>
<li><em>sourceSets.matching { it.purpose == "production" }.each { println it.name }</em>是Groovy语法，匹配上“production”的再遍历</li>
</ul>


<h1>Groovy语法</h1>

<h2>Property accessor</h2>

<p>Groovy自动为属性添加getter和setter方法
{% codeblock Property accessor lang:groovy %}
// Using a getter method
println project.buildDir
println getProject().getBuildDir()</p>

<p>// Using a setter method
project.buildDir = 'target'
getProject().setBuildDir('target')
{% endcodeblock %}</p>

<h2>Optional parentheses on method calls</h2>

<p>方法调用的时候括号是可选的
{% codeblock Optional parentheses lang:groovy %}
test.systemProperty 'some.prop', 'value'
test.systemProperty('some.prop', 'value')
{% endcodeblock %}</p>

<h2>List</h2>

<p>{% codeblock List lang:groovy %}
// List literal
test.includes = ['org/gradle/api/<strong>', 'org/gradle/internal/</strong>']</p>

<p>List<String> list = new ArrayList<String>()
list.add('org/gradle/api/<strong>')
list.add('org/gradle/internal/</strong>')
test.includes = list
{% endcodeblock %}</p>

<h2>Map</h2>

<p>{% codeblock Map lang:groovy %}
// Map literal
apply plugin: 'java'</p>

<p>Map&lt;String, String> map = new HashMap&lt;String, String>()
map.put('plugin', 'java')
apply(map)
{% endcodeblock %}</p>

<ul>
<li>这里<strong>apply plugin: 'java'</strong>相当于Ruby里的<strong>apply plugin=>'java'</strong>

<h2>Closures as the last parameter in a method</h2>

<p>{% codeblock Closure lang:groovy %}
repositories {
  println "in a closure"
}
repositories() { println "in a closure" }
repositories({ println "in a closure" })
{% endcodeblock %}</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using the Gradle Command-Line]]></title>
    <link href="http://reverocean.github.com/blog/2012/10/12/using-the-gradle-command-line/"/>
    <updated>2012-10-12T14:21:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/10/12/using-the-gradle-command-line</id>
    <content type="html"><![CDATA[<p>执行Gradle命令一些用法</p>

<ul>
<li>一次运行多个task<br/>
  <strong><em>gradle dist test</em></strong></li>
<li>使用-x参数可以指定哪些task不执行 <br/>
  <strong><em>gradle dist -x test</em></strong></li>
<li>使用--continue当有错误时继续执行未执行的task<br/>
  <strong><em>gradle dist test --continue</em></strong></li>
<li>使用task的缩写执行task <br/>
  <strong><em>gradle cT</em></strong> <br/>
  执行compileTest task</li>
<li>使用-b指定build脚本文件</li>
<li>gradle projects</li>
<li>gradle tasks</li>
<li>gradle dependencies</li>
<li>gradle properties</li>
<li>gradle -m clean compile列出要执行哪些task</li>
</ul>

]]></content>
  </entry>
  
</feed>
