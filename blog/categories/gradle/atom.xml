<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Gradle | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/gradle/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2014-01-02T21:40:02+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Use Your Custom Gradle Plugin]]></title>
    <link href="http://reverocean.github.com/blog/2013/12/10/how-to-use-your-custom-gradle-plugin/"/>
    <updated>2013-12-10T14:50:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/12/10/how-to-use-your-custom-gradle-plugin</id>
    <content type="html"><![CDATA[<p>在<a href="http://reverocean.github.io/blog/2013/12/09/gradle-plugin-for-mybatis-generator/">Gradle Plugin for MyBatis Generator</a>一文中描述了如何自定义一个插件，下面我们就应该考虑该如何使用我们的插件了。相信大家都知道通过<strong>apply plugin:插件名</strong>来使用插件，但是要使用自定义插件的话，有一个问题就是Gradle脚本去哪里找我们自定义的插件。我们可以通过下面三种方式来使用自定义插件：<br/>
1. 将插件和Gradle脚本放在同一个文件里<br/>
2. 上传到Maven Repository里去<br/>
3. 上传到Github上<br/>
讲插件的定义代码放在build.gradle文件里，这个没有什么好讲的，在插件里直接通过apply就可以。但是我们自定义插件的目的就是为了让插件能够被其他项目使用到，要是放在build.gradle文件里就不能被其他项目使用了，也就失去了我们自定义插件的意义了，所以我们着重讲下后面两种情况。</p>

<h1>上传到Maven Repository</h1>

<p>Gradle天然和Maven融合的很好，除了可以使用Maven Repository里的依赖，还可以在Gradle里使用在Maven Repository的插件。说到Maven Repository，想必大家都知道有本地和远程两种Maven Repository之分。在上传时上没有什么不一样的配置，只是使用的时候，本地的Maven Repository只能在本机上使用，而远程的可以给整个公司乃至全球的人使用。<br/>
要上传到Maven Repository，我们首先要在自定义插件项目的build.gradl文件里使用<em>maven</em>插件：<br/>
<code>
apply plugin: 'maven'
</code><br/>
这样我们执行<em>gradle install</em>就能把插件安装到Local Maven Repository的默认目录（一般在home下的.m2文件下），在使用插件的Gradle脚本里，通过如下的方式引用：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Local Maven Repository插件的使用  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;repositories {</span>
</span><span class='line'><span class="s">    mavenLocal()</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">dependencies {</span>
</span><span class='line'><span class="s">    classpath(&#39;com.rever:mybatis:1.0-SNAPSHOT&#39;)</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;mybatis&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 <!--more-->
这里是放到默认目录，如果我们想放到特定目录的话，我们就要使用Maven插件提供的uploadArchives任务了，我们通过为uploadArchives指定要上传的路径即可：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>指定uploadArchives路径  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;maven&#39;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;uploadArchives {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenDeployer</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="s2">&quot;file://${projectDir}/repo&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
这样就上传到当前plugin项目的根目录下的repo目录下，同样这里的url如果指定为远程Maven Repository的话，就会上传到远程。那么在使用的时候也就需要调整了：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>上传到指定的文件夹  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;repositories {</span>
</span><span class='line'><span class="s">    maven {</span>
</span><span class='line'><span class="s">        url uri(&#39;../</span><span class="n">repo</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">    }</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">dependencies {</span>
</span><span class='line'><span class="s1">    classpath(&#39;</span><span class="n">com</span><span class="o">.</span><span class="na">rever</span><span class="o">:</span><span class="nl">mybatis:</span><span class="mf">1.0</span><span class="o">-</span><span class="n">SNAPSHOT</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">}</span>
</span><span class='line'><span class="s1">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&lt;p&gt;}</span>
</span><span class='line'><span class="s1">apply plugin: &#39;</span><span class="n">mybatis</span><span class="err">&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
按照这两种方式就可以将插件传到Maven Repository，之后在项目的Gradle脚本里使用了。</p>

<h1>上传到Github</h1>

<p>上传到Maven Repository一般来说就能解决问题了，但是如果公司没有Maven Repository私服的话要去sonatype注册用户还是很麻烦，作为我们用来管理代码的Github要是也能提供插件就完美了。<br/>
其实，将插件上传到Github，然后再使用也很简单。首先还是要像上面上传到Local Maven Repository上传到当前项目的repo文件夹下：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>上传到指定的文件夹  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;maven&#39;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;uploadArchives {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">mavenDeployer</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">repository</span><span class="o">(</span><span class="nl">url:</span> <span class="s2">&quot;file://${projectDir}/repo&quot;</span><span class="o">)</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
然后将repo添加到Github上去，但是这样还不能使用。为了能够使用上传到Github上的插件，需要提供一个gradle文件：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>mybatis.gradle  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;def pathParts = sourceURI.path.split(&#39;/</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">def version = pathParts[-2]</span>
</span><span class='line'><span class="s1">def basePath = pathParts[0..(pathParts.size()-6)].join(&#39;</span><span class="s">/&#39;)</span>
</span><span class='line'><span class="s">if (sourceURI.scheme != &#39;file&#39;) {</span>
</span><span class='line'><span class="s">    def uri = new java.net.URI(sourceURI.scheme, sourceURI.userInfo, sourceURI.host, sourceURI.port, basePath, null, null)</span>
</span><span class='line'><span class="s">    basePath = &quot;${uri.toString()}&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'>
</span><span class='line'><span class="s">repositories {</span>
</span><span class='line'><span class="s">    mavenCentral()</span>
</span><span class='line'><span class="s">    mavenRepo url: basePath</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">dependencies {</span>
</span><span class='line'><span class="s">    classpath(&quot;com.rever:mybatisPlugin:${version}&quot;)</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">repositories</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;mavenCentral()</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="n">com</span><span class="o">.</span><span class="na">rever</span><span class="o">.</span><span class="na">MyBatisGeneratorPlugin</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
该文件也就是根据当前路径解析出版本号，然后再使用该插件。将该文件放到对应的版本文件夹下，我这里存放的路径是：<strong>repo/com/rever/mybatisPlugin/1.0-SNAPSHOT/</strong>。有了这个文件之后，我们通过如下简单的引用就能使用插件了：
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>使用Github上的插件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">buildscript</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;apply from: &#39;https://raw.github.com/</span><span class="n">reverocean</span><span class="s">/MyBatisGenerator/</span><span class="n">master</span><span class="s">/repo/</span><span class="n">com</span><span class="s">/rever/</span><span class="n">mybatisPlugin</span><span class="s">/1.0-SNAPSHOT/</span><span class="n">mybatis</span><span class="o">.</span><span class="na">gradle</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<hr />

<p>本文讲解了两种方式上传Gradle自定义插件，大体上来说如果插件就开发者自己使用，那么可以上传到Local Maven Repository，如果要整个公司使用，那么我推荐放到公司的私有Maven Repository或者其他Maven Repository上去。如果你的代码在Github上管理，那么我推荐上传到Github上去。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle Plugin For MyBatis Generator]]></title>
    <link href="http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator/"/>
    <updated>2013-12-09T14:31:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/12/09/gradle-plugin-for-mybatis-generator</id>
    <content type="html"><![CDATA[<p>因为项目原因，最近又重新看了一下MyBatis，发现MyBatis只有Ant和Maven的Generator，没有Gradle的插件。而现在Gradle已经越来越流行，没有Gradle插件怎么行。<br/>
编写Gradle插件，可以从头自己实现，也可以调用现有的Ant Task。MyBatis已经有Ant的Generator了，所以我决定不重造轮子，调用Ant的Task就行了。</p>

<h2>定义插件Task的类型</h2>

<p>编写插件就是为了重用一些Task，比如Gradle的Java插件，就提供了编译、测试以及打包等Task，这样在构建脚本里使用：<br/>
<code>
apply: 'java'
</code><br/>
就可以使用这些Task。所以我们自定义插件，就难免要为插件定义Task。Gradle中的Task也是有类型的，比如<a href="http://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.Copy.html">Copy</a>的Task。自定义Task也可以继承已经有的Task，但是我们这里要使用的Task是Ant提供的，所以我们需要继承ConventionTask。<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task的定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kd">class</span> <span class="nc">MyBatisGeneratorTask</span> <span class="kd">extends</span> <span class="n">ConventionTask</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;//Define some properties</span>
</span><span class='line'><span class="s">@TaskAction</span>
</span><span class='line'><span class="s">void executeCargoAction() {</span>
</span><span class='line'><span class="s">//Implement the task action</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
申明了Task之后，就需要实现Task的Action了，就是该Task都做哪些事情。我们这里要调用MyBatis的Ant任务，所以需要使用IsolatedAntBuilder。代码如下：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task的Action实现  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">services</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">IsolatedAntBuilder</span><span class="o">).</span><span class="na">withClasspath</span><span class="o">(</span><span class="n">getMyBatisGeneratorClasspath</span><span class="o">()).</span><span class="na">execute</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;   ant.taskdef(name: &#39;mbgenerator&#39;, </span>
</span><span class='line'><span class="s">                     classname: &#39;org.mybatis.generator.ant.GeneratorAntTask&#39;)</span>
</span><span class='line'>
</span><span class='line'><span class="s">   ant.properties[&#39;generated.source.dir&#39;] = getTargetDir()</span>
</span><span class='line'><span class="s">   ant.mbgenerator(overwrite: getOverwrite(), </span>
</span><span class='line'><span class="s">                        configfile: getConfigFile(), </span>
</span><span class='line'><span class="s">                        verbose: getVerbose()) {}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
 <!--more-->
跟Ant里一样，要使用自定义的Ant任务，就必须先通过Ant的Taskdef定义一个Task，之后才能在Ant脚本里使用。同样在Gradle里也通过<strong>ant.taskdef</strong>来定义新的Ant任务。要定义Task，我们就需要制定从哪个classpath下去加载指定的类名<em>org.mybatis.generator.ant.GeneratorAntTask</em>。这里我们通过getMyBatisGeneratorClasspath()获得，这就需要我们在使用该Gradle Task的时候讲classpath传到Task里去，所以我们就需要定义Task的属性了。同时，大家还应该注意到这里不止一个getMyBatisGeneratorClasspath()方法，还有其他的Get方法，这些Get方法都是从Task的属性取值。我们的Task属性定义如下：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Task的属性  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="kt">def</span> <span class="n">overwrite</span>
</span><span class='line'><span class="kt">def</span> <span class="n">configFile</span>
</span><span class='line'><span class="kt">def</span> <span class="n">verbose</span>
</span><span class='line'><span class="kt">def</span> <span class="n">targetDir</span>
</span><span class='line'><span class="n">FileCollection</span> <span class="n">myBatisGeneratorClasspath</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>编写Plugin</h2>

<p>有了Task类型之后，我们就可以编写Plugin了。自定义Plugin需要实现Plugin接口： <br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Plugin  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;class MyBatisGeneratorPlugin implements Plugin&lt;ProjectInternal&gt; {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nd">@Override</span>
</span><span class='line'><span class="kt">void</span> <span class="nf">apply</span><span class="o">(</span><span class="n">ProjectInternal</span> <span class="n">project</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">project</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">info</span> <span class="s2">&quot;Configuring MyBatis Generator for project: $project.name&quot;</span>
</span><span class='line'>    <span class="n">MyBatisGeneratorTask</span> <span class="n">task</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">tasks</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;mbGenerator&quot;</span><span class="o">,</span> <span class="n">MyBatisGeneratorTask</span><span class="o">);</span>
</span><span class='line'>    <span class="n">project</span><span class="o">.</span><span class="na">configurations</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s1">&#39;mybatis&#39;</span><span class="o">).</span><span class="na">with</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">description</span> <span class="o">=</span> <span class="s1">&#39;The MyBatis Generator to be used for this project.&#39;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;mybatis&quot;</span><span class="o">,</span> <span class="n">MyBatisGeneratorPluginExtension</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">task</span><span class="o">.</span><span class="na">conventionMapping</span><span class="o">.</span><span class="na">with</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">myBatisGeneratorClasspath</span> <span class="o">=</span> <span class="o">{</span>
</span><span class='line'>            <span class="kt">def</span> <span class="n">config</span> <span class="o">=</span> <span class="n">project</span><span class="o">.</span><span class="na">configurations</span><span class="o">[</span><span class="s1">&#39;mybatis&#39;</span><span class="o">]</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">config</span><span class="o">.</span><span class="na">dependencies</span><span class="o">.</span><span class="na">empty</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">project</span><span class="o">.</span><span class="na">dependencies</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">mybatis</span><span class="o">(</span><span class="s1">&#39;org.mybatis.generator:mybatis-generator-core:1.3.2&#39;</span><span class="o">)</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">config</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">overwrite</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">mybatis</span><span class="o">.</span><span class="na">overwrite</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">configFile</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">mybatis</span><span class="o">.</span><span class="na">configFile</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">verbose</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">mybatis</span><span class="o">.</span><span class="na">verbose</span> <span class="o">}</span>
</span><span class='line'>        <span class="n">targetDir</span> <span class="o">=</span> <span class="o">{</span> <span class="n">project</span><span class="o">.</span><span class="na">mybatis</span><span class="o">.</span><span class="na">targetDir</span> <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>在这里我们通过<em>MyBatisGeneratorTask task = project.tasks.create("mbGenerator", MyBatisGeneratorTask);</em>创建一个Task并给该Task指定相应的属性。</p>

<h2>插件的配置</h2>

<p>要编写插件，就难免需要在Gradle里配置该插件。在Gradle的插件里，通常都提供默认配置值，但是有时在Gradle构建脚本里也需要让用户自定义。在Gradle里使用<em>extension objects</em>方法，通过Project的<a href="http://www.gradle.org/docs/current/javadoc/org/gradle/api/plugins/ExtensionContainer.html">ExtensionContainer</a>对象，把构建脚本里的配置信息传到插件里。Extension很简单，就是简单的Groovy对象：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Extension的定义  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="nd">@ToString</span><span class="o">(</span><span class="n">includeNames</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
</span><span class='line'><span class="kd">class</span> <span class="nc">MyBatisGeneratorPluginExtension</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;def overwrite = true</span>
</span><span class='line'><span class="s">def configFile = &quot;generatorConfig.xml&quot;</span>
</span><span class='line'><span class="s">def verbose = false</span>
</span><span class='line'><span class="s">def targetDir = &quot;.&quot;</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div> <br/>
接下来就是在插件里使用这个Extension：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Extension的使用  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">project</span><span class="o">.</span><span class="na">extensions</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s2">&quot;mybatis&quot;</span><span class="o">,</span> <span class="n">MyBatisGeneratorPluginExtension</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
这里就会把构建脚本里的mybatis的配置，合并到我们提供的Extension里去，比如在构建脚本里提供如下的配置：<br/>
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>配置插件  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">mybatis</span><span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;configFile = &#39;../</span><span class="n">generatorConfig</span><span class="o">.</span><span class="na">xml</span><span class="err">&#39;</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div><br/>
就会覆盖默认的configFile配置，默认会从当前目录里去找generatorConfig.xml的文件，但是经过我们配置之后，就会从上级目录去找该文件。</p>

<h2>Summary</h2>

<p>至此，Gradle的MyBatis插件编写完毕，下面一个问题就是如何在项目中使用。该插件已经上传到Github:<a href="https://github.com/reverocean/MyBatisGenerator">https://github.com/reverocean/MyBatisGenerator</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart GCIS]]></title>
    <link href="http://reverocean.github.com/blog/2013/03/28/smart-gcis/"/>
    <updated>2013-03-28T20:14:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/03/28/smart-gcis</id>
    <content type="html"><![CDATA[<p>在大数据如此活跃的今天，我们这两天也跟大数据来了一次亲密接触。我们六个人的小组在一天时间里完成了一个简单的产品智能推荐系统，我们称为<a href="https://github.com/reverocean/Stuart">Smart GCIS</a>。</p>

<h1>项目结构</h1>

<p>我们决定提供Micro-Service，所以在项目里面我们分了好如下几个模块：</p>

<ul>
<li>smart-persistence</li>
<li>smart-match</li>
<li>smart-recommendation</li>
<li>smart-web<br/>
其中smart-persistence提供持久层服务，我们使用Hibernate来访问Mysql；smart-match提供match功能，通过Spring-Batch调用Match引擎来匹配相同的用户；smart-recommendation为客户推荐可能要购买的产品；smart-web提供一个界面用于市场人员查看客户以及其推荐产品，同事smart-web还提供RESTd的Micro-Service。</li>
</ul>


<h1>构建脚本</h1>

<p>针对这样的一个多模块项目，我们使用<a href="http://www.gradle.org/">Gradle</a>作为我们项目的构建脚本。</p>

<h2>问题</h2>

<p>在项目的初期，搭建项目的时候，我犯了一个致命的疏忽。就是在配置多模块的项目时需要一个settings.gradle的文件，我少写了一个<strong>s</strong>，导致子模块在Idea里不是Java项目。这个废了我不少时间，最后还是<a href="http://dreamhead.blogbus.com/">dreamhead</a>帮助才发现问题。<br/>
<strong>我要跟s做斗争</strong></p>

<h2>进步</h2>

<p>我们在项目里面使用<a href="http://dropwizard.codahale.com/">DropWizard</a>作为Micro-Service的web开发，而Dropwizard的一个特点就是它通过一个main函数启动并提供web服务。在DropWizard官方文档里是要让打成jar包，然后通过Java -jar来运行。这样是很方便，但是在开发过程中就不方便了，因为要打Jar包之后运行，才能看见结果。<br/>
所以我引入了Gradle的<a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">application</a>插件，在smart-web的build.gradle文件中apply这个插件，并且指定要运行的main之后就可以在命令行里运行：
<code>groovy
gradle :smart-web:run
</code>
来运行DropWizard了。不过这里还有个问题就是在运行DropWizard的时候，需要为main函数提供一个server和configuration.yml的参数，但是在gradle :smart-web:run后面加上这两个参数有会报错。好在Gradle的appliation插件提供了相应的配置：<br/>
```groovy
run {</p>

<pre><code>args 'server', 'src/main/resources/stuart.yaml'
</code></pre>

<p>}
```
这样就解决问题了。
 <!--more--></p>

<h1>DropWizard</h1>

<p>在<a href="http://www.thoughtworks.com/cn/articles/technology-radar-october-2012-0">ThoughtWorks2012年的技术雷达</a>中，提到了一个趋势，就是embedded servlet containers。<a href="http://dropwizard.codahale.com/">DropWizard</a>就是这样一个embedded servlet containers。<br/>
Dropwizard的文档很详细，我就不赘述了，但是在这个项目中，我们使用Dropwizard提供web页面（Freemarker），就必然要访问css和javascript。目前，Dropwizard还不支持提供assets，好在我们碰见的问题都不时问题，已经有人已经提供好了<a href="https://github.com/bazaarvoice/dropwizard-configurable-assets-bundle">扩展</a>，我们只需要include进来就可以了。</p>

<ul>
<li>首先，需要在build.gradle中加入"com.bazaarvoice.dropwizard:dropwizard-configurable-assets-bundle:0.1.9"的依赖</li>
<li>其次按照扩展的说明文档，很容易就能配好</li>
<li>但是有一个坑，就是assets的目录需要映射的，在文档中是dashboard，需要改成自己需要的就可以了</li>
</ul>


<h1>其他</h1>

<p>这次活动一共6个人，一个人准备数据，一个人完成持久层，一个人完成匹配引擎，一个人完成推荐系统，两个人pair做界面，感觉配合的非常好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Add cucumber-JVM into project with gradle]]></title>
    <link href="http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle/"/>
    <updated>2013-01-14T17:19:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle</id>
    <content type="html"><![CDATA[<p>众所周知，Cucumber是Ruby的一个用来BDD的测试框架。<a href="https://github.com/cucumber/cucumber-jvm">Cucumber-Java</a>则是Java版的Cucumber，它模拟Ruby里的DSL，使用Annotation创建了一套Java的BDD测试框架。Cucumber-JVM项目中只有通过ant和maven来使用Cucumber-JVM的例子，这里我记录一下Cucumber-JVM如何在Gradle里使用。</p>

<h2>为项目引入Cucumber-JVM</h2>

<p>首先在build.gradle文件中加入对于Cucumber-JVM的依赖：<br/>
```groovy
testCompile(</p>

<pre><code>        'info.cukes:cucumber-java:1.1.1',
        'info.cukes:cucumber-junit:1.1.1',
        'junit:junit:4.10'
</code></pre>

<p>)
```</p>

<h2>添加task运行Cucumber</h2>

<p>添加完stories和steps之后，就可以运行Cucumber-JVM了，看看我们的测试是否通过。虽然在Gradle里文档里说了运行<strong>gradle test</strong>时，会扫描classpath路径下具有@RunWith annotation的类，并作为JUnit的测试去运行。但是，我在使用的时候（gradlew1.3），运行<strong>gradle test</strong>找不到标记了@RunWith的JUnit Runner（这个是gradle的一个bug，已经有人报上去了）。<br/>
在研究了Cucumber-JVM自带的例子里的ant脚本之后，我通过添加一个task来运行Cucumber-JVM的测试：<br/>
```groovy cucumber task
task cucumber() {</p>

<pre><code>dependsOn classes
doLast {
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath configurations.cucumberRuntime
        classpath sourceSets.main.output.classesDir
        classpath sourceSets.test.output.classesDir
        args = ['-f', 'pretty', '--glue', 'cucumber.examples.java.helloworld', 'src/test/resources']

    }
}
</code></pre>

<p>}
```</p>

<ul>
<li>这里实际上就是运行Cucumber-JVM提供的Java类cucumber.api.cli.Main去运行@RunWith的JUnit Runner。</li>
<li>需要给cucumber.api.cli.Main类指定classpath：<em>sourceSets.test.output.classesDir</em>，<em>sourceSets.main.output.classesDir</em>以及<em>configurations.cucumberRuntime</em>。configurations.cucumberRuntime的配置如下：<br/>
```groovy
configurations {
cucumberRuntime {

<pre><code>extendsFrom testCompile
</code></pre>

<p>}
}
```</p></li>
<li>通过args指定steps的包（cucumber.examples.java.helloworld）和stories的目录（src/test/resources）</li>
</ul>


<p> <!--more-->
 ##完整build.gradle</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>build.gradle  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;idea&#39;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;repositories {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">mavenCentral</span><span class="o">()</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;configurations {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">cucumberRuntime</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">extendsFrom</span> <span class="n">testRuntime</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;dependencies {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">testCompile</span><span class="o">(</span>
</span><span class='line'>        <span class="s1">&#39;info.cukes:cucumber-java:1.1.1&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;info.cukes:cucumber-junit:1.1.1&#39;</span><span class="o">,</span>
</span><span class='line'>        <span class="s1">&#39;junit:junit:4.10&#39;</span>
</span><span class='line'><span class="o">)</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;task cucumber() {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">dependsOn</span> <span class="n">classes</span>
</span><span class='line'><span class="n">doLast</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">javaexec</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">main</span> <span class="o">=</span> <span class="s2">&quot;cucumber.api.cli.Main&quot;</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="n">configurations</span><span class="o">.</span><span class="na">cucumberRuntime</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">main</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span>
</span><span class='line'>        <span class="n">classpath</span> <span class="n">sourceSets</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">output</span><span class="o">.</span><span class="na">classesDir</span>
</span><span class='line'>        <span class="n">args</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;-f&#39;</span><span class="o">,</span> <span class="s1">&#39;pretty&#39;</span><span class="o">,</span> <span class="s1">&#39;--glue&#39;</span><span class="o">,</span> <span class="s1">&#39;cucumber.examples.java.helloworld&#39;</span><span class="o">,</span> <span class="s1">&#39;src/test/resources&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Building Script]]></title>
    <link href="http://reverocean.github.com/blog/2012/10/12/writing-building-script/"/>
    <updated>2012-10-12T14:43:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/10/12/writing-building-script</id>
    <content type="html"><![CDATA[<p>在Gradle运行的时候，会创建一个Project的实例。同时每个Script文件也会被编译为一个实现了<strong>Script</strong>的类，也就意味着在<strong>Script</strong>接口里声明的属性和方法在你的Script文件里都是有效的。</p>

<h1>定义变量</h1>

<h2>局部变量</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Local variables  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;def dest = &quot;dest&quot;</span>
</span><span class='line'><span class="s">task copy(type: Copy) {</span>
</span><span class='line'><span class="s">    from &quot;source&quot;</span>
</span><span class='line'><span class="s">    into dest</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Extra properties</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Extra properties  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s2">&quot;java&quot;</span><span class="o">&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;ext {&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">springVersion</span> <span class="o">=</span> <span class="s2">&quot;3.1.0.RELEASE&quot;</span>
</span><span class='line'><span class="n">emailNotification</span> <span class="o">=</span> <span class="s2">&quot;build@master.org&quot;</span>
</span><span class='line'><span class="o">&lt;</span><span class="s">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;sourceSets.all { ext.purpose = null }&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sourceSets</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;main {</span>
</span><span class='line'><span class="s">    purpose = &quot;production&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">test {</span>
</span><span class='line'><span class="s">    purpose = &quot;test&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">plugin {</span>
</span><span class='line'><span class="s">    purpose = &quot;production&quot;</span>
</span><span class='line'><span class="s">}</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="s">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">task</span> <span class="n">printProperties</span> <span class="o">&amp;</span><span class="n">lt</span><span class="o">;&amp;</span><span class="n">lt</span><span class="o">;</span> <span class="o">{&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;pre&gt;&lt;code&gt;println springVersion</span>
</span><span class='line'><span class="s">println emailNotification</span>
</span><span class='line'><span class="s">sourceSets.matching { it.purpose == &quot;production&quot; }.each { println it.name }</span>
</span><span class='line'><span class="s">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Gradle的每个对象都可以通过ext来定义属性</li>
<li><em>sourceSets.all { ext.purpose = null }</em>为<strong>sourceSets</strong>包含的每个对象设置一个<em>ext.purpose</em>属性(相当于初始化)，不要这句的话，build也能正常运行，但是会有Warning</li>
<li><strong>sourceSets</strong>是Configures the source sets of this project</li>
<li><em>sourceSets.matching { it.purpose == "production" }.each { println it.name }</em>是Groovy语法，匹配上“production”的再遍历</li>
</ul>


<h1>Groovy语法</h1>

<h2>Property accessor</h2>

<p>Groovy自动为属性添加getter和setter方法
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Property accessor  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Using a getter method</span>
</span><span class='line'><span class="n">println</span> <span class="n">project</span><span class="o">.</span><span class="na">buildDir</span>
</span><span class='line'><span class="n">println</span> <span class="nf">getProject</span><span class="o">().</span><span class="na">getBuildDir</span><span class="o">()&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;/</span><span class="o">/</span> <span class="n">Using</span> <span class="n">a</span> <span class="n">setter</span> <span class="n">method</span>
</span><span class='line'><span class="n">project</span><span class="o">.</span><span class="na">buildDir</span> <span class="o">=</span> <span class="s1">&#39;target&#39;</span>
</span><span class='line'><span class="n">getProject</span><span class="o">().</span><span class="na">setBuildDir</span><span class="o">(</span><span class="s1">&#39;target&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Optional parentheses on method calls</h2>

<p>方法调用的时候括号是可选的
<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Optional parentheses  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">test</span><span class="o">.</span><span class="na">systemProperty</span> <span class="s1">&#39;some.prop&#39;</span><span class="o">,</span> <span class="s1">&#39;value&#39;</span>
</span><span class='line'><span class="n">test</span><span class="o">.</span><span class="na">systemProperty</span><span class="o">(</span><span class="s1">&#39;some.prop&#39;</span><span class="o">,</span> <span class="s1">&#39;value&#39;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>List</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>List  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// List literal</span>
</span><span class='line'><span class="n">test</span><span class="o">.</span><span class="na">includes</span> <span class="o">=</span> <span class="o">[</span><span class="s1">&#39;org/gradle/api/&lt;strong&gt;&#39;</span><span class="o">,</span> <span class="s1">&#39;org/gradle/internal/&lt;/strong&gt;&#39;</span><span class="o">]&lt;</span><span class="s">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s">&lt;p&gt;List&lt;String&gt; list = new ArrayList&lt;String&gt;()</span>
</span><span class='line'><span class="s">list.add(&#39;org/</span><span class="n">gradle</span><span class="s">/api/</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="s1">&#39;)</span>
</span><span class='line'><span class="s1">list.add(&#39;</span><span class="n">org</span><span class="s">/gradle/</span><span class="n">internal</span><span class="s">/&lt;/</span><span class="n">strong</span><span class="o">&gt;</span><span class="err">&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">test</span><span class="o">.</span><span class="na">includes</span> <span class="o">=</span> <span class="n">list</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Map</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Map  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="c1">// Map literal</span>
</span><span class='line'><span class="n">apply</span> <span class="nl">plugin:</span> <span class="s1">&#39;java&#39;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Map</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;()</span>
</span><span class='line'><span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s1">&#39;plugin&#39;</span><span class="o">,</span> <span class="s1">&#39;java&#39;</span><span class="o">)</span>
</span><span class='line'><span class="n">apply</span><span class="o">(</span><span class="n">map</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>这里<strong>apply plugin: 'java'</strong>相当于Ruby里的<strong>apply plugin=>'java'</strong>

<h2>Closures as the last parameter in a method</h2>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Closure  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='groovy'><span class='line'><span class="n">repositories</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">println</span> <span class="s2">&quot;in a closure&quot;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="n">repositories</span><span class="o">()</span> <span class="o">{</span> <span class="n">println</span> <span class="s2">&quot;in a closure&quot;</span> <span class="o">}</span>
</span><span class='line'><span class="n">repositories</span><span class="o">({</span> <span class="n">println</span> <span class="s2">&quot;in a closure&quot;</span> <span class="o">})</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
</ul>

]]></content>
  </entry>
  
</feed>
