<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Cucumber | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/cucumber/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2013-12-10T14:41:28+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Add cucumber-JVM into project with gradle]]></title>
    <link href="http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle/"/>
    <updated>2013-01-14T17:19:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/01/14/add-cucumber-jvm-into-project-with-gradle</id>
    <content type="html"><![CDATA[<p>众所周知，Cucumber是Ruby的一个用来BDD的测试框架。<a href="https://github.com/cucumber/cucumber-jvm">Cucumber-Java</a>则是Java版的Cucumber，它模拟Ruby里的DSL，使用Annotation创建了一套Java的BDD测试框架。Cucumber-JVM项目中只有通过ant和maven来使用Cucumber-JVM的例子，这里我记录一下Cucumber-JVM如何在Gradle里使用。</p>

<h2>为项目引入Cucumber-JVM</h2>

<p>首先在build.gradle文件中加入对于Cucumber-JVM的依赖：<br/>
```groovy
testCompile(</p>

<pre><code>        'info.cukes:cucumber-java:1.1.1',
        'info.cukes:cucumber-junit:1.1.1',
        'junit:junit:4.10'
</code></pre>

<p>)
```</p>

<h2>添加task运行Cucumber</h2>

<p>添加完stories和steps之后，就可以运行Cucumber-JVM了，看看我们的测试是否通过。虽然在Gradle里文档里说了运行<strong>gradle test</strong>时，会扫描classpath路径下具有@RunWith annotation的类，并作为JUnit的测试去运行。但是，我在使用的时候（gradlew1.3），运行<strong>gradle test</strong>找不到标记了@RunWith的JUnit Runner（这个是gradle的一个bug，已经有人报上去了）。<br/>
在研究了Cucumber-JVM自带的例子里的ant脚本之后，我通过添加一个task来运行Cucumber-JVM的测试：<br/>
```groovy cucumber task
task cucumber() {</p>

<pre><code>dependsOn classes
doLast {
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath configurations.cucumberRuntime
        classpath sourceSets.main.output.classesDir
        classpath sourceSets.test.output.classesDir
        args = ['-f', 'pretty', '--glue', 'cucumber.examples.java.helloworld', 'src/test/resources']

    }
}
</code></pre>

<p>}
```</p>

<ul>
<li>这里实际上就是运行Cucumber-JVM提供的Java类cucumber.api.cli.Main去运行@RunWith的JUnit Runner。</li>
<li>需要给cucumber.api.cli.Main类指定classpath：<em>sourceSets.test.output.classesDir</em>，<em>sourceSets.main.output.classesDir</em>以及<em>configurations.cucumberRuntime</em>。configurations.cucumberRuntime的配置如下：<br/>
```groovy
configurations {
cucumberRuntime {

<pre><code>extendsFrom testCompile
</code></pre>

<p>}
}
```</p></li>
<li>通过args指定steps的包（cucumber.examples.java.helloworld）和stories的目录（src/test/resources）</li>
</ul>


<p> <!--more-->
 ##完整build.gradle</p>

<p>{% codeblock build.gradle lang:groovy %}
apply plugin: 'java'
apply plugin: 'idea'</p>

<p>repositories {</p>

<pre><code>mavenCentral()
</code></pre>

<p>}</p>

<p>configurations {</p>

<pre><code>cucumberRuntime {
    extendsFrom testRuntime
}
</code></pre>

<p>}</p>

<p>dependencies {</p>

<pre><code>testCompile(
        'info.cukes:cucumber-java:1.1.1',
        'info.cukes:cucumber-junit:1.1.1',
        'junit:junit:4.10'
)
</code></pre>

<p>}</p>

<p>task cucumber() {</p>

<pre><code>dependsOn classes
doLast {
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath configurations.cucumberRuntime
        classpath sourceSets.main.output.classesDir
        classpath sourceSets.test.output.classesDir
        args = ['-f', 'pretty', '--glue', 'cucumber.examples.java.helloworld', 'src/test/resources']

    }
}
</code></pre>

<p>}
 {% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
