<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | 海洋的Blog]]></title>
  <link href="http://reverocean.github.com/blog/categories/java/atom.xml" rel="self"/>
  <link href="http://reverocean.github.com/"/>
  <updated>2013-12-10T14:41:28+08:00</updated>
  <id>http://reverocean.github.com/</id>
  <author>
    <name><![CDATA[海洋]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Smart GCIS]]></title>
    <link href="http://reverocean.github.com/blog/2013/03/28/smart-gcis/"/>
    <updated>2013-03-28T20:14:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2013/03/28/smart-gcis</id>
    <content type="html"><![CDATA[<p>在大数据如此活跃的今天，我们这两天也跟大数据来了一次亲密接触。我们六个人的小组在一天时间里完成了一个简单的产品智能推荐系统，我们称为<a href="https://github.com/reverocean/Stuart">Smart GCIS</a>。</p>

<h1>项目结构</h1>

<p>我们决定提供Micro-Service，所以在项目里面我们分了好如下几个模块：</p>

<ul>
<li>smart-persistence</li>
<li>smart-match</li>
<li>smart-recommendation</li>
<li>smart-web<br/>
其中smart-persistence提供持久层服务，我们使用Hibernate来访问Mysql；smart-match提供match功能，通过Spring-Batch调用Match引擎来匹配相同的用户；smart-recommendation为客户推荐可能要购买的产品；smart-web提供一个界面用于市场人员查看客户以及其推荐产品，同事smart-web还提供RESTd的Micro-Service。</li>
</ul>


<h1>构建脚本</h1>

<p>针对这样的一个多模块项目，我们使用<a href="http://www.gradle.org/">Gradle</a>作为我们项目的构建脚本。</p>

<h2>问题</h2>

<p>在项目的初期，搭建项目的时候，我犯了一个致命的疏忽。就是在配置多模块的项目时需要一个settings.gradle的文件，我少写了一个<strong>s</strong>，导致子模块在Idea里不是Java项目。这个废了我不少时间，最后还是<a href="http://dreamhead.blogbus.com/">dreamhead</a>帮助才发现问题。<br/>
<strong>我要跟s做斗争</strong></p>

<h2>进步</h2>

<p>我们在项目里面使用<a href="http://dropwizard.codahale.com/">DropWizard</a>作为Micro-Service的web开发，而Dropwizard的一个特点就是它通过一个main函数启动并提供web服务。在DropWizard官方文档里是要让打成jar包，然后通过Java -jar来运行。这样是很方便，但是在开发过程中就不方便了，因为要打Jar包之后运行，才能看见结果。<br/>
所以我引入了Gradle的<a href="http://www.gradle.org/docs/current/userguide/application_plugin.html">application</a>插件，在smart-web的build.gradle文件中apply这个插件，并且指定要运行的main之后就可以在命令行里运行：
<code>groovy
gradle :smart-web:run
</code>
来运行DropWizard了。不过这里还有个问题就是在运行DropWizard的时候，需要为main函数提供一个server和configuration.yml的参数，但是在gradle :smart-web:run后面加上这两个参数有会报错。好在Gradle的appliation插件提供了相应的配置：<br/>
```groovy
run {</p>

<pre><code>args 'server', 'src/main/resources/stuart.yaml'
</code></pre>

<p>}
```
这样就解决问题了。
 <!--more--></p>

<h1>DropWizard</h1>

<p>在<a href="http://www.thoughtworks.com/cn/articles/technology-radar-october-2012-0">ThoughtWorks2012年的技术雷达</a>中，提到了一个趋势，就是embedded servlet containers。<a href="http://dropwizard.codahale.com/">DropWizard</a>就是这样一个embedded servlet containers。<br/>
Dropwizard的文档很详细，我就不赘述了，但是在这个项目中，我们使用Dropwizard提供web页面（Freemarker），就必然要访问css和javascript。目前，Dropwizard还不支持提供assets，好在我们碰见的问题都不时问题，已经有人已经提供好了<a href="https://github.com/bazaarvoice/dropwizard-configurable-assets-bundle">扩展</a>，我们只需要include进来就可以了。</p>

<ul>
<li>首先，需要在build.gradle中加入"com.bazaarvoice.dropwizard:dropwizard-configurable-assets-bundle:0.1.9"的依赖</li>
<li>其次按照扩展的说明文档，很容易就能配好</li>
<li>但是有一个坑，就是assets的目录需要映射的，在文档中是dashboard，需要改成自己需要的就可以了</li>
</ul>


<h1>其他</h1>

<p>这次活动一共6个人，一个人准备数据，一个人完成持久层，一个人完成匹配引擎，一个人完成推荐系统，两个人pair做界面，感觉配合的非常好。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gradle for Java]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/27/gradle-for-java/"/>
    <updated>2012-09-27T10:15:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/27/gradle-for-java</id>
    <content type="html"><![CDATA[<p>Gradle针对Java开发提供了‘java’插件，非常方便。如果安装约定的目录结构组织项目，几乎不用修改build.gradle。当然也很方便修改build.gradle去适应你的项目结构。</p>

<h1>A basic Java project</h1>

<p>{% codeblock 使用Java plugin %}
apply plugin: 'java'
{% endcodeblock %}</p>

<ul>
<li>gradle的Java插件约定的项目结构跟Maven的项目结构一样</li>
<li>所有的output文件放在build文件夹下</li>
</ul>


<h1>Tasks</h1>

<ul>
<li>build：编译，测试并创建一个包含main下面的类和资源文件的JAR</li>
<li>clean：删除build文件夹，做清理</li>
<li>assemble：编译并打一个JAR包，不测试代码。加了War插件之后会打一个war包</li>
<li>check：编译，测试。也可以添加其他的插件（Code-quality）来检查你的代码格式</li>
</ul>


<h1>管理依赖</h1>

<p>依赖管理分为两个部分，第一是本项目依赖外部的其他jar，第二是本项目会产生一个jar包，别的项目会依赖当前项目的jar包，所以需要把jar包放置到一个公共的位置。</p>

<h2>管理外部依赖</h2>

<ul>
<li>添加Maven的Repository
{% codeblock 添加respositories %}
repositories {
  mavenCentral()
}
{% endcodeblock %}
{% codeblock 添加respositories %}
repositories {
  maven {

<pre><code>  url "http://repo.mycompany.com/maven2"
</code></pre>

<p>  }
}
{% endcodeblock %}</p></li>
</ul>


<p>{% codeblock 添加lvy respositories %}
repositories {</p>

<pre><code>ivy {
    url "http://repo.mycompany.com/repo"
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock 添加lvy local respositories %}
repositories {</p>

<pre><code>ivy {
    url "../local-repo"
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<pre><code>*  Gradle支持Maven和lvy的Respository
*  Gradle可以通过local file system或者HTTP访问Respository
*  Gradle默认不配置respository
</code></pre>

<ul>
<li><p>添加dependencies
{% codeblock 添加dependencies %}
dependencies {
  compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
  testCompile group: 'junit', name: 'junit', version: '4.+'
}
{% endcodeblock %}
{% codeblock 添加dependencies %}
dependencies {
  compile 'org.hibernate:hibernate-core:3.6.7.Final'
}
{% endcodeblock %}</p>

<ul>
<li> 跟Maven一样，依赖分为几个声明周期：

<ul>
<li> compile</li>
<li> runtime</li>
<li> testCompile</li>
<li> testRuntime</li>
</ul>
</li>
<li> 同样跟Maven一样，需要指定依赖包的group，name以及version。也可以通过简单的方法“group:name:version”来指定</li>
</ul>
</li>
</ul>


<h2>Publishing artifacts</h2>

<p>{% codeblock 设置publish到lvy %}
uploadArchives {</p>

<pre><code>repositories {
    ivy {
        credentials {
            username "username"
            password "pw"
        }
        url "http://repo.mycompany.com"
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock 设置publish到Maven %}
apply plugin: 'maven'</p>

<p>uploadArchives {</p>

<pre><code>repositories {
    mavenDeployer {
        repository(url: "file://localhost/tmp/myRepo/")
    }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock 设置publish到文件夹 %}
uploadArchives {</p>

<pre><code>repositories {
   flatDir {
       dirs 'repos'
   }
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<h1>IDE插件</h1>

<p>apply plugin: 'eclipse'
apply plugin: 'idea'</p>

<p>gradle idea</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Extend Spring @MVC]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/25/extend-spring-at-mvc/"/>
    <updated>2012-09-25T09:21:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/25/extend-spring-at-mvc</id>
    <content type="html"><![CDATA[<h1>Extending RequestMappingHandlerMapping</h1>

<p>Spring @MVC通过在方法上使用RequestMapping来确认应该使用哪个方法来响应相应的请求，而RequestMapping又通过各种RequestCondition的实现来完成各种过滤（比如：consumes，headers，methods，params，produces以及value等）。在Spring @MVC框架中使用RequestConditionHolder和RequestMappingInfo这两个实现。</p>

<h2>自定义RequestCondition</h2>

<ul>
<li>实现RequestCondition接口
{% codeblock RequestCondition接口 lang:java %}
package org.springframework.web.servlet.mvc.condition;</li>
</ul>


<p>import javax.servlet.http.HttpServletRequest;
import org.springframework.web.bind.annotation.RequestMapping;</p>

<p>public interface RequestCondition<T> {</p>

<pre><code>T combine(T other);
T getMatchingCondition(HttpServletRequest request);
int compareTo(T other, HttpServletRequest request);
</code></pre>

<p>}
{% endcodeblock %}</p>

<ul>
<li>继承RequestMappingHandlerMapping

<ul>
<li> getCustomTypeCondition方法根据对应的Handler<strong>类</strong>返回类级别的condition</li>
<li> getCustomMethodCondition方法根据对应的Handler<strong>方法</strong>返回方法级别的condition</li>
</ul>
</li>
</ul>


<h1>扩展RequestMappingHandlerAdapter</h1>

<p>在Reques™appingHandlerAdapterli里，Spring @MVC通过各种HandlerMethodArgumentResolver的实现来决定传什么参数给Handler的方法。</p>

<p><strong><em>To be continue …</em></strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Exception Handling in Spring @MVC]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/24/exception-handling-in-spring-at-mvc/"/>
    <updated>2012-09-24T16:34:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/24/exception-handling-in-spring-at-mvc</id>
    <content type="html"><![CDATA[<h1>Exception Handler</h1>

<p>{% codeblock Exception Handler接口 lang:java %}
package org.springframeowork.web.servlet;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;public interface HandlerExceptionResolver {  ModelAndView resolveException(HttpServletRequest request,                                HttpServletResponse response,                                Object handler,                                Exception ex);}
{% endcodeblock %}</p>

<ul>
<li>Dispatcher servlet会查找application context里的所有实现了HandlerExceptionResolver接口的Bean。</li>
<li>如果有多个ExceptionResolver实现，在有异常出现时，Dispatcher Servlet会一次调用，直到viewname被返回或者response被写入。</li>
<li>如果异常没有被处理，那么异常会重新抛出。</li>
</ul>


<h2>Spring提供的HandlerExceptionResolver实现</h2>

<ul>
<li>AnnotationMethodHandlerExceptionResolver</li>
<li>ExceptionHandlerExceptionResolver</li>
<li>DefaultHandlerExceptionResolver</li>
<li>ResponseStatusExceptionResolver</li>
<li>SimpleMappingExceptionResolver</li>
<li>HandlerExceptionResolverComposite</li>
</ul>


<p>￼￼</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Inteceptor in Spring @MVC]]></title>
    <link href="http://reverocean.github.com/blog/2012/09/24/inteceptor-in-spring-at-mvc/"/>
    <updated>2012-09-24T14:48:00+08:00</updated>
    <id>http://reverocean.github.com/blog/2012/09/24/inteceptor-in-spring-at-mvc</id>
    <content type="html"><![CDATA[<h1>Interceptors</h1>

<p>Interceptor和Filter的功能一样，都是用于拦截incoming HTTP requests。但是Filter要比interceptor更强大些，因为Filter能够修改incoming request/response。</p>

<h2>Interceptor的回调接口</h2>

<ul>
<li>preHandler： Called before the handler is invoked</li>
<li>postHandler: 在Handler调用之后，View渲染之前调用。可以用于替换model里的共享对象</li>
<li>afterCompletion：在request处理完成之后。该方法无论preHandler方法调用成功与否都会被调用。可以用于清除一些资源。</li>
</ul>


<h2>Interceptor接口</h2>

<ul>
<li>org.springframework.web.servlet.HandlerInterceptor</li>
<li>org.springframework.web.context.request.WebRequestInterceptor
这两个Interceptor的最大区别在与WebRequestInterceptor跟底层技术独立，可以用于JSF或者Servlet，而HandlerIntercepotr只能用于Servlet。HandlerInterceptor的preHandler方法返回false可以用于阻止handler的调用。</li>
</ul>


<h1>Configuring</h1>

<p>配置Interceptor分为两步：<br/>
*  配置Interceptor<br/>
*  关联Interceptor和Handler：有两个方法来完成关联：</p>

<pre><code>1. 显示的把interceptors添加到handler mapping的配置里去  
2. 使用org.springframework.web.servlet .config.annotation.InterceptorRegistry添加（推荐这种方式）
</code></pre>

<p>{% codeblock 显示关联HandlerMapping和Interceptor lang:java %}
package com.apress.prospringmvc.bookstore.web.config;import org.springframework.context.annotation.ComponentScan;import org.springframework.context.annotation.Configuration;import org.springframework.web.servlet.config.annotation.EnableWebMvc;import org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;@Configuration@EnableWebMvc@ComponentScan(basePackages = { "com.apress.prospringmvc.bookstore.web" })public class WebMvcContextConfiguration extends WebMvcConfigurationSupport {    @Override    public RequestMappingHandlerMapping requestMappingHandlerMapping() {        RequestMappingHandlerMapping handlerMapping;        handlerMapping = super.requestMappingHandlerMapping();        handlerMapping.setInterceptors(getAllInterceptors());        return handlerMapping } }
{% endcodeblock %}</p>

<p>{% codeblock 使用InterceptorRegistry关联HandlerMapping和Interceptor lang:java %}
package com.apress.prospringmvc.bookstore.web.config;//Other imports omittedimport org.springframework.web.servlet.HandlerInterceptor;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;@Configuration@EnableWebMvc@ComponentScan(basePackages = { "com.apress.prospringmvc.bookstore.web" })public class WebMvcContextConfiguration extends WebMvcConfigurerAdapter {    @Override    public void addInterceptors(InterceptorRegistry registry) {        registry.addInterceptor(localeChangeInterceptor());    }    @Bean    public HandlerInterceptor localeChangeInterceptor() {        LocaleChangeInterceptor localeChangeInterceptor;        localeChangeInterceptor = new LocaleChangeInterceptor();        localeChangeInterceptor.setParamName("lang");        return localeChangeInterceptor;    }    //... Other methods omitted}
{% endcodeblock %}</p>

<p>{% codeblock Limiting an Interceptor to Certain URLs lang:java %}
package com.apress.prospringmvc.bookstore.web.config;//Imports omitted@Configuration@EnableWebMvc@ComponentScan(basePackages = { "com.apress.prospringmvc.bookstore.web" })public class WebMvcContextConfiguration extends WebMvcConfigurerAdapter {    @Override    public void addInterceptors(InterceptorRegistry registry) {        InterceptorRegistration registration;       registration = registry.addInterceptor(localeChangeInterceptor());      registation.addPathPatterns("/customers/**");}    //Other methods omitted}
{% endcodeblock %}</p>
]]></content>
  </entry>
  
</feed>
